// –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

// –°–æ–∑–¥–∞–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

console.log('Supabase URL:', supabaseUrl ? 'Found' : 'Not found');
console.log('Supabase Anon Key:', supabaseAnonKey ? 'Found' : 'Not found');
console.log('Supabase Service Key:', supabaseServiceKey ? 'Found' : 'Not found');

if (!supabaseUrl || (!supabaseAnonKey && !supabaseServiceKey)) {
  console.error('‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  process.exit(1);
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º service key –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ anon key
const supabaseKey = supabaseServiceKey || supabaseAnonKey;
const supabase = createClient(supabaseUrl, supabaseKey);

console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á:', supabaseServiceKey ? 'Service Role Key' : 'Anon Key');

async function testConnection() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –¥–µ–ª–∞—è –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    const { data, error } = await supabase
      .from('consent_logs')
      .select('id')
      .limit(1);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Ç–∞–±–ª–∏—Ü–µ consent_logs:', error.message);
      console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
      return;
    }

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ consent_logs –¥–æ—Å—Ç—É–ø–Ω–∞');
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–Ω–æ –ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö...');
    const testData = {
      timestamp: new Date().toISOString(),
      ip: '127.0.0.1',
      user_agent: 'Test Agent',
      form_type: 'test_form',
      email: 'test@example.com',
      phone: '+1234567890',
      consents: { privacyPolicy: true, dataTransfer: false },
      policy_version: 'test-2025-10-26'
    };

    const { data: insertData, error: insertError } = await supabase
      .from('consent_logs')
      .insert([testData]);

    if (insertError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:', insertError.message);
      console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', insertError);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É consent_logs');
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Supabase:', error.message);
  }
}

testConnection();