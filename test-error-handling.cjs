// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ JSON
const { createClient } = require('@supabase/supabase-js');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ-JSON –æ—Ç–≤–µ—Ç–æ–≤
async function testTelegramErrorHandling() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ Telegram API...');

  // –ú–æ–∫–∞–µ–º fetch –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram API —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º Content-Type
  global.fetch = async (url, options) => {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–º–∏—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞ —Å HTML –≤–º–µ—Å—Ç–æ JSON
    return {
      ok: false,
      status: 500,
      headers: {
        get: (name) => {
          if (name.toLowerCase() === 'content-type') {
            return 'text/html'; // –°–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML –≤–º–µ—Å—Ç–æ JSON
          }
          return null;
        }
      },
      text: async () => 'A server error occurred', // –≠—Ç–æ —Ç–æ, —á—Ç–æ –≤—ã–∑–≤–∞–ª–æ –æ—à–∏–±–∫—É "Unexpected token 'A'"
      json: async () => {
        // –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML –∫–∞–∫ JSON
        throw new Error('Unexpected token A in JSON');
      }
    };
  };

  // –ò–º–∏—Ç–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ sendTelegramMessage —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
  async function sendTelegramMessage(data) {
    try {
      const message = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: –ò–º—è ‚Äî ${data.name}, –¢–µ–ª–µ—Ñ–æ–Ω ‚Äî ${data.phone}, –ö–æ–º–ø–∞–Ω–∏—è ‚Äî ${data.company}`;
      
      const response = await fetch(`https://api.telegram.org/botTEST/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: 'TEST',
          text: message
        }),
      });

      if (response.ok) {
        const result = await response.json();
        return { success: true, data: result };
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç JSON –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
        const contentType = response.headers.get('content-type');
        let errorData;
        if (contentType && contentType.includes('application/json')) {
          errorData = await response.json();
        } else {
          // –ï—Å–ª–∏ –Ω–µ JSON, —á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
          const errorText = await response.text();
          console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –Ω–µ-JSON –æ—à–∏–±–∫–∞:', errorText);
          return { success: false, error: errorText };
        }
        return { success: false, error: errorData.description || 'Telegram API error' };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendTelegramMessage:', error.message);
      return { success: false, error: error.message };
    }
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
  const result = await sendTelegramMessage({
    name: 'Test User',
    phone: '+1234567890',
    company: 'Test Company'
  });

  if (!result.success) {
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('   –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', result.error);
    return true;
 } else {
    console.log('‚ùå –û—à–∏–±–∫–∞ –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º');
    return false;
  }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ñ–æ—Ä–º—ã
async function testFormResponseHandling() {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–æ–≤ —Ñ–æ—Ä–º—ã...');

  // –ú–æ–∫–∞–µ–º fetch –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
  global.fetch = async (url, options) => {
    if (url === '/api/lead') {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ JSON
      return {
        ok: false,
        status: 500,
        headers: {
          get: (name) => {
            if (name.toLowerCase() === 'content-type') {
              return 'text/html';
            }
            return null;
          }
        },
        text: async () => 'A server error occurred',
        json: async () => {
          throw new Error('Unexpected token A in JSON');
        }
      };
    }
    return { ok: true, status: 200, json: async () => ({ message: 'OK' }) };
  };

  // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ LeadCaptureForm
 async function handleFormResponse(response) {
    if (response.ok) {
      const result = await response.json();
      return { success: true, data: result };
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º JSON
      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        const errorResult = await response.json();
        return { success: false, error: errorResult.message };
      } else {
        // –ï—Å–ª–∏ –Ω–µ JSON, —á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
        const errorText = await response.text();
        return { success: false, error: errorText };
      }
    }
 }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º
 const mockResponse = {
    ok: false,
    status: 500,
    headers: {
      get: (name) => {
        if (name.toLowerCase() === 'content-type') {
          return 'text/html';
        }
        return null;
      }
    },
    text: async () => 'A server error occurred',
    json: async () => {
      throw new Error('Unexpected token A in JSON');
    }
  };

  try {
    const result = await handleFormResponse(mockResponse);
    if (!result.success) {
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ-JSON –æ—Ç–≤–µ—Ç–∞ —Ñ–æ—Ä–º—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('   –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', result.error);
      return true;
    } else {
      console.log('‚ùå –û—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞:', error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
async function runTests() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ JSON...\n');
  
  const test1 = await testTelegramErrorHandling();
  const test2 = await testFormResponseHandling();
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log(`–¢–µ—Å—Ç 1 (Telegram API): ${test1 ? '‚úÖ –ü—Ä–æ–π–¥–µ–Ω' : '‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω'}`);
  console.log(`–¢–µ—Å—Ç 2 (–§–æ—Ä–º–∞): ${test2 ? '‚úÖ –ü—Ä–æ–π–¥–µ–Ω' : '‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω'}`);
  
  if (test1 && test2) {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –û—à–∏–±–∫–∏ JSON –±–æ–ª—å—à–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –≤–æ–∑–Ω–∏–∫–∞—Ç—å.');
  } else {
    console.log('\n‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.');
  }
}

runTests();